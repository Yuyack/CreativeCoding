int lifetime;  

Population population;  

int lifecycle;          
int recordtime;         

Obstacle target;      

ArrayList<Obstacle> obstacles; 
PVector obstacleNew; 

void setup() {
  size(1000, 500);
  lifetime = 500;

  lifecycle = 0;
  recordtime = lifetime;
  
  target = new Obstacle(width/2-12, 50);
  target.setColorFill( #81A5F9 );

  float mutationRate = 0.01;
  population = new Population(mutationRate, 50);

  obstacles = new ArrayList<Obstacle>();
  obstacleNew = new PVector(0,0,0);
  
}

void draw() {
  background(0);

  target.display();

  if (lifecycle < lifetime) {
    population.live(obstacles);
    if ((population.targetReached()) && (lifecycle < recordtime)) {
      recordtime = lifecycle;
    }
    lifecycle++;
  } 
  else {
    lifecycle = 0;
    population.fitness();
    population.selection();
    population.reproduction();
  }

  fill(255);
  text("Generation #: " + population.getGenerations(), 10, 18);
  text("Cycles left: " + (lifetime-lifecycle), 10, 36);

  fill(color(255,0,0));
  noStroke();
  ellipseMode(CENTER);
  for( PVector[] maxTrail : population.getMaxFitnessTrail() ){
    for( PVector one : maxTrail ){
      circle(one.x, one.y, 1);
    }
  }
  saveFrame("####");
}
  
